(function (root, factory) {
    'use strict';

    var dependencies = [
        '../lib/espower',
        'esprima',
        'escodegen',
        'assert'
    ];

    if (typeof define === 'function' && define.amd) {
        define(dependencies, factory);
    } else if (typeof exports === 'object') {
        factory.apply(root, dependencies.map(function (path) { return require(path); }));
    } else {
        factory.apply(root, dependencies.map(function (path) {
            var tokens = path.split('/');
            return root[tokens[tokens.length - 1]];
        }));
    }
}(this, function (
    espower,
    esprima,
    escodegen,
    assert
) {

// see: https://github.com/Constellation/escodegen/issues/115
if (typeof define === 'function' && define.amd) {
    escodegen = window.escodegen;
}

describe('instrumentation spec', function () {
    function testWithEsprimaOptions (jsCode, expected, options) {
        it(jsCode, function () {
            var jsAST = esprima.parse(jsCode, options),
                espoweredAST = espower(jsAST, {source: jsCode, path: '/path/to/some_test.js'}),
                instrumentedCode = escodegen.generate(espoweredAST, {format: {compact: true}});
            assert.equal(instrumentedCode, expected);
        });
    }

    function inst (jsCode, expected) {
        // describe('with loc, range, tokens', function () {
        //     var options = {tolerant: true, loc: true, range: true, tokens: true};
        //     testWithEsprimaOptions(jsCode, expected, options);
        // });
        // describe('with loc, range', function () {
        //     var options = {tolerant: true, loc: true, range: true};
        //     testWithEsprimaOptions(jsCode, expected, options);
        // });
        describe('with loc, tokens', function () {
            var options = {tolerant: true, loc: true, tokens: true};
            testWithEsprimaOptions(jsCode, expected, options);
        });
        // describe('with loc', function () {
        //     var options = {tolerant: true, loc: true};
        //     testWithEsprimaOptions(jsCode, expected, options);
        // });
    }


    describe('Literal', function () {
        inst("assert(false);",
             "assert(false);");

        inst("assert(0);",
             "assert(0);");

        inst("assert.equal(1, 0);",
             "assert.equal(1,0);");

        inst("assert(false, 'message');",
             "assert(false,'message');");

        inst("assert(false, messageStr);",
             "assert(false,messageStr);");
    });


    describe('Identifier', function () {
        inst("assert(falsyStr);",
             "assert(assert._expr(assert._capt(falsyStr,''),{tree:{'type':'Identifier','name':'falsyStr','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':15}}},tokens:[{'type':'Identifier','value':'falsyStr','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':15}}}],content:'assert(falsyStr);',filepath:'/path/to/some_test.js'}));");

        inst("assert(falsyStr, messageStr);",
             "assert(assert._expr(assert._capt(falsyStr,''),{tree:{'type':'Identifier','name':'falsyStr','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':15}}},tokens:[{'type':'Identifier','value':'falsyStr','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':15}}}],content:'assert(falsyStr, messageStr);',filepath:'/path/to/some_test.js'}),messageStr);");

        inst("return assert(falsyStr);",
             "return assert(assert._expr(assert._capt(falsyStr,''),{tree:{'type':'Identifier','name':'falsyStr','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':22}}},tokens:[{'type':'Identifier','value':'falsyStr','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':22}}}],content:'return assert(falsyStr);',filepath:'/path/to/some_test.js'}));");

        inst("assert.equal(str, anotherStr);",
             "assert.equal(assert._expr(assert._capt(str,''),{tree:{'type':'Identifier','name':'str','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}},tokens:[{'type':'Identifier','value':'str','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}}],content:'assert.equal(str, anotherStr);',filepath:'/path/to/some_test.js'}),assert._expr(assert._capt(anotherStr,''),{tree:{'type':'Identifier','name':'anotherStr','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':28}}},tokens:[{'type':'Identifier','value':'anotherStr','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':28}}}],content:'assert.equal(str, anotherStr);',filepath:'/path/to/some_test.js'}));");

        inst("assert.equal(str, anotherStr, messageStr);",
             "assert.equal(assert._expr(assert._capt(str,''),{tree:{'type':'Identifier','name':'str','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}},tokens:[{'type':'Identifier','value':'str','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}}],content:'assert.equal(str, anotherStr, messageStr);',filepath:'/path/to/some_test.js'}),assert._expr(assert._capt(anotherStr,''),{tree:{'type':'Identifier','name':'anotherStr','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':28}}},tokens:[{'type':'Identifier','value':'anotherStr','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':28}}}],content:'assert.equal(str, anotherStr, messageStr);',filepath:'/path/to/some_test.js'}),messageStr);");
    });


    describe('BinaryExpression', function () {
        inst("assert(4 !== 4);",
             "assert(assert._expr(assert._capt(4!==4,''),{tree:{'type':'BinaryExpression','operator':'!==','left':{'type':'Literal','value':4,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},'right':{'type':'Literal','value':4,'loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':14}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':14}}},tokens:[{'type':'Numeric','value':'4','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Punctuator','value':'!==','loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':12}}},{'type':'Numeric','value':'4','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':14}}}],content:'assert(4 !== 4);',filepath:'/path/to/some_test.js'}));");

        inst("assert(fuga !== 4);",
             "assert(assert._expr(assert._capt(assert._capt(fuga,'left')!==4,''),{tree:{'type':'BinaryExpression','operator':'!==','left':{'type':'Identifier','name':'fuga','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},'right':{'type':'Literal','value':4,'loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':17}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':17}}},tokens:[{'type':'Identifier','value':'fuga','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},{'type':'Punctuator','value':'!==','loc':{'start':{'line':1,'column':12},'end':{'line':1,'column':15}}},{'type':'Numeric','value':'4','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':17}}}],content:'assert(fuga !== 4);',filepath:'/path/to/some_test.js'}));");

        inst("assert(fuga === piyo);",
             "assert(assert._expr(assert._capt(assert._capt(fuga,'left')===assert._capt(piyo,'right'),''),{tree:{'type':'BinaryExpression','operator':'===','left':{'type':'Identifier','name':'fuga','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},'right':{'type':'Identifier','name':'piyo','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':20}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':20}}},tokens:[{'type':'Identifier','value':'fuga','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},{'type':'Punctuator','value':'===','loc':{'start':{'line':1,'column':12},'end':{'line':1,'column':15}}},{'type':'Identifier','value':'piyo','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':20}}}],content:'assert(fuga === piyo);',filepath:'/path/to/some_test.js'}));");

        inst("assert(fuga   ===   piyo);",
             "assert(assert._expr(assert._capt(assert._capt(fuga,'left')===assert._capt(piyo,'right'),''),{tree:{'type':'BinaryExpression','operator':'===','left':{'type':'Identifier','name':'fuga','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},'right':{'type':'Identifier','name':'piyo','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':24}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':24}}},tokens:[{'type':'Identifier','value':'fuga','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},{'type':'Punctuator','value':'===','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':17}}},{'type':'Identifier','value':'piyo','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':24}}}],content:'assert(fuga   ===   piyo);',filepath:'/path/to/some_test.js'}));");

        inst("assert(fuga !== piyo);",
             "assert(assert._expr(assert._capt(assert._capt(fuga,'left')!==assert._capt(piyo,'right'),''),{tree:{'type':'BinaryExpression','operator':'!==','left':{'type':'Identifier','name':'fuga','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},'right':{'type':'Identifier','name':'piyo','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':20}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':20}}},tokens:[{'type':'Identifier','value':'fuga','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},{'type':'Punctuator','value':'!==','loc':{'start':{'line':1,'column':12},'end':{'line':1,'column':15}}},{'type':'Identifier','value':'piyo','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':20}}}],content:'assert(fuga !== piyo);',filepath:'/path/to/some_test.js'}));");

        inst("assert.ok(hoge === fuga, 'comment');",
             "assert.ok(assert._expr(assert._capt(assert._capt(hoge,'left')===assert._capt(fuga,'right'),''),{tree:{'type':'BinaryExpression','operator':'===','left':{'type':'Identifier','name':'hoge','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':14}}},'right':{'type':'Identifier','name':'fuga','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':23}}},'loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':23}}},tokens:[{'type':'Identifier','value':'hoge','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':'===','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':18}}},{'type':'Identifier','value':'fuga','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':23}}}],content:'assert.ok(hoge === fuga, \\'comment\\');',filepath:'/path/to/some_test.js'}),'comment');");

        inst("assert(ary1.length === ary2.length);",
             "assert(assert._expr(assert._capt(assert._capt(assert._capt(ary1,'left/object').length,'left')===assert._capt(assert._capt(ary2,'right/object').length,'right'),''),{tree:{'type':'BinaryExpression','operator':'===','left':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'ary1','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},'property':{'type':'Identifier','name':'length','loc':{'start':{'line':1,'column':12},'end':{'line':1,'column':18}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':18}}},'right':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'ary2','loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':27}}},'property':{'type':'Identifier','name':'length','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':34}}},'loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':34}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':34}}},tokens:[{'type':'Identifier','value':'ary1','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':12}}},{'type':'Identifier','value':'length','loc':{'start':{'line':1,'column':12},'end':{'line':1,'column':18}}},{'type':'Punctuator','value':'===','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':22}}},{'type':'Identifier','value':'ary2','loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':27}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':27},'end':{'line':1,'column':28}}},{'type':'Identifier','value':'length','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':34}}}],content:'assert(ary1.length === ary2.length);',filepath:'/path/to/some_test.js'}));");
    });


    describe('UnaryExpression', function () {
        inst("assert(!truth);",
             "assert(assert._expr(assert._capt(!assert._capt(truth,'argument'),''),{tree:{'type':'UnaryExpression','operator':'!','argument':{'type':'Identifier','name':'truth','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':13}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':13}}},tokens:[{'type':'Punctuator','value':'!','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Identifier','value':'truth','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':13}}}],content:'assert(!truth);',filepath:'/path/to/some_test.js'}));");

        inst("assert(!!some);",
             "assert(assert._expr(assert._capt(!assert._capt(!assert._capt(some,'argument/argument'),'argument'),''),{tree:{'type':'UnaryExpression','operator':'!','argument':{'type':'UnaryExpression','operator':'!','argument':{'type':'Identifier','name':'some','loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':13}}},'prefix':true,'loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':13}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':13}}},tokens:[{'type':'Punctuator','value':'!','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Punctuator','value':'!','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':9}}},{'type':'Identifier','value':'some','loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':13}}}],content:'assert(!!some);',filepath:'/path/to/some_test.js'}));");

        inst("assert(!!foo.bar);",
             "assert(assert._expr(assert._capt(!assert._capt(!assert._capt(assert._capt(foo,'argument/argument/object').bar,'argument/argument'),'argument'),''),{tree:{'type':'UnaryExpression','operator':'!','argument':{'type':'UnaryExpression','operator':'!','argument':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':12}}},'property':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}},'loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':16}}},'prefix':true,'loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':16}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':16}}},tokens:[{'type':'Punctuator','value':'!','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Punctuator','value':'!','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':9}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':12}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':12},'end':{'line':1,'column':13}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}}],content:'assert(!!foo.bar);',filepath:'/path/to/some_test.js'}));");

        inst("assert(delete foo);",
             "assert(assert._expr(assert._capt(delete foo,''),{tree:{'type':'UnaryExpression','operator':'delete','argument':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':17}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':17}}},tokens:[{'type':'Keyword','value':'delete','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':13}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':17}}}],content:'assert(delete foo);',filepath:'/path/to/some_test.js'}));");

        inst("assert(delete foo.bar);",
             "assert(assert._expr(assert._capt(delete assert._capt(assert._capt(foo,'argument/object').bar,'argument'),''),{tree:{'type':'UnaryExpression','operator':'delete','argument':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':17}}},'property':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':21}}},'loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':21}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':21}}},tokens:[{'type':'Keyword','value':'delete','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':13}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':17}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':18}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':21}}}],content:'assert(delete foo.bar);',filepath:'/path/to/some_test.js'}));");

        inst("assert(typeof foo !== 'undefined');",
             "assert(assert._expr(assert._capt(assert._capt(typeof foo,'left')!=='undefined',''),{tree:{'type':'BinaryExpression','operator':'!==','left':{'type':'UnaryExpression','operator':'typeof','argument':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':17}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':17}}},'right':{'type':'Literal','value':'undefined','loc':{'start':{'line':1,'column':22},'end':{'line':1,'column':33}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':33}}},tokens:[{'type':'Keyword','value':'typeof','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':13}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':17}}},{'type':'Punctuator','value':'!==','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':21}}},{'type':'String','value':'\\'undefined\\'','loc':{'start':{'line':1,'column':22},'end':{'line':1,'column':33}}}],content:'assert(typeof foo !== \\'undefined\\');',filepath:'/path/to/some_test.js'}));");

        inst("assert(typeof foo.bar !== 'undefined');",
             "assert(assert._expr(assert._capt(assert._capt(typeof assert._capt(assert._capt(foo,'left/argument/object').bar,'left/argument'),'left')!=='undefined',''),{tree:{'type':'BinaryExpression','operator':'!==','left':{'type':'UnaryExpression','operator':'typeof','argument':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':17}}},'property':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':21}}},'loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':21}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':21}}},'right':{'type':'Literal','value':'undefined','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':37}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':37}}},tokens:[{'type':'Keyword','value':'typeof','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':13}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':17}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':18}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':21}}},{'type':'Punctuator','value':'!==','loc':{'start':{'line':1,'column':22},'end':{'line':1,'column':25}}},{'type':'String','value':'\\'undefined\\'','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':37}}}],content:'assert(typeof foo.bar !== \\'undefined\\');',filepath:'/path/to/some_test.js'}));");

        inst("assert.strictEqual(typeof foo, typeof bar);",
             "assert.strictEqual(assert._expr(assert._capt(typeof foo,''),{tree:{'type':'UnaryExpression','operator':'typeof','argument':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':29}}},'prefix':true,'loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':29}}},tokens:[{'type':'Keyword','value':'typeof','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':25}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':29}}}],content:'assert.strictEqual(typeof foo, typeof bar);',filepath:'/path/to/some_test.js'}),assert._expr(assert._capt(typeof bar,''),{tree:{'type':'UnaryExpression','operator':'typeof','argument':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':38},'end':{'line':1,'column':41}}},'prefix':true,'loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':41}}},tokens:[{'type':'Keyword','value':'typeof','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':37}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':38},'end':{'line':1,'column':41}}}],content:'assert.strictEqual(typeof foo, typeof bar);',filepath:'/path/to/some_test.js'}));");
    });


    describe('LogicalExpression', function () {
        inst("assert(5 < actual && actual < 13);",
             "assert(assert._expr(assert._capt(assert._capt(5<assert._capt(actual,'left/right'),'left')&&assert._capt(assert._capt(actual,'right/left')<13,'right'),''),{tree:{'type':'LogicalExpression','operator':'&&','left':{'type':'BinaryExpression','operator':'<','left':{'type':'Literal','value':5,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},'right':{'type':'Identifier','name':'actual','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':17}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':17}}},'right':{'type':'BinaryExpression','operator':'<','left':{'type':'Identifier','name':'actual','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':27}}},'right':{'type':'Literal','value':13,'loc':{'start':{'line':1,'column':30},'end':{'line':1,'column':32}}},'loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':32}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':32}}},tokens:[{'type':'Numeric','value':'5','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Punctuator','value':'<','loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':10}}},{'type':'Identifier','value':'actual','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':17}}},{'type':'Punctuator','value':'&&','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':20}}},{'type':'Identifier','value':'actual','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':27}}},{'type':'Punctuator','value':'<','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':29}}},{'type':'Numeric','value':'13','loc':{'start':{'line':1,'column':30},'end':{'line':1,'column':32}}}],content:'assert(5 < actual && actual < 13);',filepath:'/path/to/some_test.js'}));");

        inst("assert.ok(actual < 5 || 13 < actual);",
             "assert.ok(assert._expr(assert._capt(assert._capt(assert._capt(actual,'left/left')<5,'left')||assert._capt(13<assert._capt(actual,'right/right'),'right'),''),{tree:{'type':'LogicalExpression','operator':'||','left':{'type':'BinaryExpression','operator':'<','left':{'type':'Identifier','name':'actual','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':16}}},'right':{'type':'Literal','value':5,'loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':20}}},'loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':20}}},'right':{'type':'BinaryExpression','operator':'<','left':{'type':'Literal','value':13,'loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':26}}},'right':{'type':'Identifier','name':'actual','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':35}}},'loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':35}}},'loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':35}}},tokens:[{'type':'Identifier','value':'actual','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':16}}},{'type':'Punctuator','value':'<','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':18}}},{'type':'Numeric','value':'5','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':20}}},{'type':'Punctuator','value':'||','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':23}}},{'type':'Numeric','value':'13','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':26}}},{'type':'Punctuator','value':'<','loc':{'start':{'line':1,'column':27},'end':{'line':1,'column':28}}},{'type':'Identifier','value':'actual','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':35}}}],content:'assert.ok(actual < 5 || 13 < actual);',filepath:'/path/to/some_test.js'}));");

        inst("assert(2 > actual && actual < 13);",
             "assert(assert._expr(assert._capt(assert._capt(2>assert._capt(actual,'left/right'),'left')&&assert._capt(assert._capt(actual,'right/left')<13,'right'),''),{tree:{'type':'LogicalExpression','operator':'&&','left':{'type':'BinaryExpression','operator':'>','left':{'type':'Literal','value':2,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},'right':{'type':'Identifier','name':'actual','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':17}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':17}}},'right':{'type':'BinaryExpression','operator':'<','left':{'type':'Identifier','name':'actual','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':27}}},'right':{'type':'Literal','value':13,'loc':{'start':{'line':1,'column':30},'end':{'line':1,'column':32}}},'loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':32}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':32}}},tokens:[{'type':'Numeric','value':'2','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Punctuator','value':'>','loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':10}}},{'type':'Identifier','value':'actual','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':17}}},{'type':'Punctuator','value':'&&','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':20}}},{'type':'Identifier','value':'actual','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':27}}},{'type':'Punctuator','value':'<','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':29}}},{'type':'Numeric','value':'13','loc':{'start':{'line':1,'column':30},'end':{'line':1,'column':32}}}],content:'assert(2 > actual && actual < 13);',filepath:'/path/to/some_test.js'}));");

        inst("assert(2   >   actual    &&  actual     <  13);",
             "assert(assert._expr(assert._capt(assert._capt(2>assert._capt(actual,'left/right'),'left')&&assert._capt(assert._capt(actual,'right/left')<13,'right'),''),{tree:{'type':'LogicalExpression','operator':'&&','left':{'type':'BinaryExpression','operator':'>','left':{'type':'Literal','value':2,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},'right':{'type':'Identifier','name':'actual','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':21}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':21}}},'right':{'type':'BinaryExpression','operator':'<','left':{'type':'Identifier','name':'actual','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':35}}},'right':{'type':'Literal','value':13,'loc':{'start':{'line':1,'column':43},'end':{'line':1,'column':45}}},'loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':45}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':45}}},tokens:[{'type':'Numeric','value':'2','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Punctuator','value':'>','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':12}}},{'type':'Identifier','value':'actual','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':21}}},{'type':'Punctuator','value':'&&','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':27}}},{'type':'Identifier','value':'actual','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':35}}},{'type':'Punctuator','value':'<','loc':{'start':{'line':1,'column':40},'end':{'line':1,'column':41}}},{'type':'Numeric','value':'13','loc':{'start':{'line':1,'column':43},'end':{'line':1,'column':45}}}],content:'assert(2   >   actual    &&  actual     <  13);',filepath:'/path/to/some_test.js'}));");

        inst("assert.equal(5 < actual && actual < 13, falsy);",
             "assert.equal(assert._expr(assert._capt(assert._capt(5<assert._capt(actual,'left/right'),'left')&&assert._capt(assert._capt(actual,'right/left')<13,'right'),''),{tree:{'type':'LogicalExpression','operator':'&&','left':{'type':'BinaryExpression','operator':'<','left':{'type':'Literal','value':5,'loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':14}}},'right':{'type':'Identifier','name':'actual','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':23}}},'loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':23}}},'right':{'type':'BinaryExpression','operator':'<','left':{'type':'Identifier','name':'actual','loc':{'start':{'line':1,'column':27},'end':{'line':1,'column':33}}},'right':{'type':'Literal','value':13,'loc':{'start':{'line':1,'column':36},'end':{'line':1,'column':38}}},'loc':{'start':{'line':1,'column':27},'end':{'line':1,'column':38}}},'loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':38}}},tokens:[{'type':'Numeric','value':'5','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':'<','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':16}}},{'type':'Identifier','value':'actual','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':23}}},{'type':'Punctuator','value':'&&','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':26}}},{'type':'Identifier','value':'actual','loc':{'start':{'line':1,'column':27},'end':{'line':1,'column':33}}},{'type':'Punctuator','value':'<','loc':{'start':{'line':1,'column':34},'end':{'line':1,'column':35}}},{'type':'Numeric','value':'13','loc':{'start':{'line':1,'column':36},'end':{'line':1,'column':38}}}],content:'assert.equal(5 < actual && actual < 13, falsy);',filepath:'/path/to/some_test.js'}),assert._expr(assert._capt(falsy,''),{tree:{'type':'Identifier','name':'falsy','loc':{'start':{'line':1,'column':40},'end':{'line':1,'column':45}}},tokens:[{'type':'Identifier','value':'falsy','loc':{'start':{'line':1,'column':40},'end':{'line':1,'column':45}}}],content:'assert.equal(5 < actual && actual < 13, falsy);',filepath:'/path/to/some_test.js'}));");
    });


    describe('MemberExpression', function () {
        inst("assert(foo.bar);",
             "assert(assert._expr(assert._capt(assert._capt(foo,'object').bar,''),{tree:{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':14}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}}],content:'assert(foo.bar);',filepath:'/path/to/some_test.js'}));");

        inst("assert(foo.bar.baz);",
             "assert(assert._expr(assert._capt(assert._capt(assert._capt(foo,'object/object').bar,'object').baz,''),{tree:{'type':'MemberExpression','computed':false,'object':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':14}}},'property':{'type':'Identifier','name':'baz','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':18}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':18}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':15}}},{'type':'Identifier','value':'baz','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':18}}}],content:'assert(foo.bar.baz);',filepath:'/path/to/some_test.js'}));");

        inst("assert(foo['bar']);",
             "assert(assert._expr(assert._capt(assert._capt(foo,'object')['bar'],''),{tree:{'type':'MemberExpression','computed':true,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'Literal','value':'bar','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':16}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':17}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'String','value':'\\'bar\\'','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':16}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':17}}}],content:'assert(foo[\\'bar\\']);',filepath:'/path/to/some_test.js'}));");

        inst("assert(foo[propName]);",
             "assert(assert._expr(assert._capt(assert._capt(foo,'object')[assert._capt(propName,'property')],''),{tree:{'type':'MemberExpression','computed':true,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'Identifier','name':'propName','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':19}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':20}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'propName','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':19}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':20}}}],content:'assert(foo[propName]);',filepath:'/path/to/some_test.js'}));");

        inst("assert(foo  [  propName  ]  );",
             "assert(assert._expr(assert._capt(assert._capt(foo,'object')[assert._capt(propName,'property')],''),{tree:{'type':'MemberExpression','computed':true,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'Identifier','name':'propName','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':23}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':26}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':12},'end':{'line':1,'column':13}}},{'type':'Identifier','value':'propName','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':23}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':26}}}],content:'assert(foo  [  propName  ]  );',filepath:'/path/to/some_test.js'}));");

        inst("assert(foo[func(key)]);",
             "assert(assert._expr(assert._capt(assert._capt(foo,'object')[assert._capt(func(assert._capt(key,'property/arguments/0')),'property')],''),{tree:{'type':'MemberExpression','computed':true,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'CallExpression','callee':{'type':'Identifier','name':'func','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':15}}},'arguments':[{'type':'Identifier','name':'key','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':19}}}],'loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':20}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':21}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'func','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':15}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':16}}},{'type':'Identifier','value':'key','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':19}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':20}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':21}}}],content:'assert(foo[func(key)]);',filepath:'/path/to/some_test.js'}));");

        inst("assert(foo[propName]['key'][keys()['name']]);",
             "assert(assert._expr(assert._capt(assert._capt(assert._capt(assert._capt(foo,'object/object/object')[assert._capt(propName,'object/object/property')],'object/object')['key'],'object')[assert._capt(assert._capt(keys(),'property/object')['name'],'property')],''),{tree:{'type':'MemberExpression','computed':true,'object':{'type':'MemberExpression','computed':true,'object':{'type':'MemberExpression','computed':true,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'Identifier','name':'propName','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':19}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':20}}},'property':{'type':'Literal','value':'key','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':26}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':27}}},'property':{'type':'MemberExpression','computed':true,'object':{'type':'CallExpression','callee':{'type':'Identifier','name':'keys','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':32}}},'arguments':[],'loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':34}}},'property':{'type':'Literal','value':'name','loc':{'start':{'line':1,'column':35},'end':{'line':1,'column':41}}},'loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':42}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':43}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'propName','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':19}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':20}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':21}}},{'type':'String','value':'\\'key\\'','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':26}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':27}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':27},'end':{'line':1,'column':28}}},{'type':'Identifier','value':'keys','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':32}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':33}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':34}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':34},'end':{'line':1,'column':35}}},{'type':'String','value':'\\'name\\'','loc':{'start':{'line':1,'column':35},'end':{'line':1,'column':41}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':41},'end':{'line':1,'column':42}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':42},'end':{'line':1,'column':43}}}],content:'assert(foo[propName][\\'key\\'][keys()[\\'name\\']]);',filepath:'/path/to/some_test.js'}));");

        inst("assert( foo [  propName  ] [  'key' ]   [ keys  (  )  [   'name'  ] ]  );",
             "assert(assert._expr(assert._capt(assert._capt(assert._capt(assert._capt(foo,'object/object/object')[assert._capt(propName,'object/object/property')],'object/object')['key'],'object')[assert._capt(assert._capt(keys(),'property/object')['name'],'property')],''),{tree:{'type':'MemberExpression','computed':true,'object':{'type':'MemberExpression','computed':true,'object':{'type':'MemberExpression','computed':true,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':11}}},'property':{'type':'Identifier','name':'propName','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':23}}},'loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':26}}},'property':{'type':'Literal','value':'key','loc':{'start':{'line':1,'column':30},'end':{'line':1,'column':35}}},'loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':37}}},'property':{'type':'MemberExpression','computed':true,'object':{'type':'CallExpression','callee':{'type':'Identifier','name':'keys','loc':{'start':{'line':1,'column':42},'end':{'line':1,'column':46}}},'arguments':[],'loc':{'start':{'line':1,'column':42},'end':{'line':1,'column':52}}},'property':{'type':'Literal','value':'name','loc':{'start':{'line':1,'column':58},'end':{'line':1,'column':64}}},'loc':{'start':{'line':1,'column':42},'end':{'line':1,'column':67}}},'loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':69}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':11}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':12},'end':{'line':1,'column':13}}},{'type':'Identifier','value':'propName','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':23}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':26}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':27},'end':{'line':1,'column':28}}},{'type':'String','value':'\\'key\\'','loc':{'start':{'line':1,'column':30},'end':{'line':1,'column':35}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':36},'end':{'line':1,'column':37}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':40},'end':{'line':1,'column':41}}},{'type':'Identifier','value':'keys','loc':{'start':{'line':1,'column':42},'end':{'line':1,'column':46}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':48},'end':{'line':1,'column':49}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':51},'end':{'line':1,'column':52}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':54},'end':{'line':1,'column':55}}},{'type':'String','value':'\\'name\\'','loc':{'start':{'line':1,'column':58},'end':{'line':1,'column':64}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':66},'end':{'line':1,'column':67}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':68},'end':{'line':1,'column':69}}}],content:'assert( foo [  propName  ] [  \\'key\\' ]   [ keys  (  )  [   \\'name\\'  ] ]  );',filepath:'/path/to/some_test.js'}));");

        inst("assert.equal(ary1.length, ary2.length);",
             "assert.equal(assert._expr(assert._capt(assert._capt(ary1,'object').length,''),{tree:{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'ary1','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':17}}},'property':{'type':'Identifier','name':'length','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':24}}},'loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':24}}},tokens:[{'type':'Identifier','value':'ary1','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':17}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':18}}},{'type':'Identifier','value':'length','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':24}}}],content:'assert.equal(ary1.length, ary2.length);',filepath:'/path/to/some_test.js'}),assert._expr(assert._capt(assert._capt(ary2,'object').length,''),{tree:{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'ary2','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':30}}},'property':{'type':'Identifier','name':'length','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':37}}},'loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':37}}},tokens:[{'type':'Identifier','value':'ary2','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':30}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':30},'end':{'line':1,'column':31}}},{'type':'Identifier','value':'length','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':37}}}],content:'assert.equal(ary1.length, ary2.length);',filepath:'/path/to/some_test.js'}));");

        inst("assert.deepEqual(foo.propName, foo[key]);",
             "assert.deepEqual(assert._expr(assert._capt(assert._capt(foo,'object').propName,''),{tree:{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':20}}},'property':{'type':'Identifier','name':'propName','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':29}}},'loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':29}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':20}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':21}}},{'type':'Identifier','value':'propName','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':29}}}],content:'assert.deepEqual(foo.propName, foo[key]);',filepath:'/path/to/some_test.js'}),assert._expr(assert._capt(assert._capt(foo,'object')[assert._capt(key,'property')],''),{tree:{'type':'MemberExpression','computed':true,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':34}}},'property':{'type':'Identifier','name':'key','loc':{'start':{'line':1,'column':35},'end':{'line':1,'column':38}}},'loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':39}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':34}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':34},'end':{'line':1,'column':35}}},{'type':'Identifier','value':'key','loc':{'start':{'line':1,'column':35},'end':{'line':1,'column':38}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':38},'end':{'line':1,'column':39}}}],content:'assert.deepEqual(foo.propName, foo[key]);',filepath:'/path/to/some_test.js'}));");
    });


    describe('CallExpression', function () {
        inst("assert(func());",
             "assert(assert._expr(assert._capt(func(),''),{tree:{'type':'CallExpression','callee':{'type':'Identifier','name':'func','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},'arguments':[],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':13}}},tokens:[{'type':'Identifier','value':'func','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':12}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':12},'end':{'line':1,'column':13}}}],content:'assert(func());',filepath:'/path/to/some_test.js'}));");

        inst("assert(obj.age());",
             "assert(assert._expr(assert._capt(assert._capt(obj,'callee/object').age(),''),{tree:{'type':'CallExpression','callee':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'obj','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'Identifier','name':'age','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':14}}},'arguments':[],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':16}}},tokens:[{'type':'Identifier','value':'obj','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'age','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':15}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':16}}}],content:'assert(obj.age());',filepath:'/path/to/some_test.js'}));");

        inst("assert(isFalsy(positiveInt));",
             "assert(assert._expr(assert._capt(isFalsy(assert._capt(positiveInt,'arguments/0')),''),{tree:{'type':'CallExpression','callee':{'type':'Identifier','name':'isFalsy','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':14}}},'arguments':[{'type':'Identifier','name':'positiveInt','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':26}}}],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':27}}},tokens:[{'type':'Identifier','value':'isFalsy','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':15}}},{'type':'Identifier','value':'positiveInt','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':26}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':27}}}],content:'assert(isFalsy(positiveInt));',filepath:'/path/to/some_test.js'}));");

        inst("assert(foo[propName]());",
             "assert(assert._expr(assert._capt(assert._capt(foo,'callee/object')[assert._capt(propName,'callee/property')](),''),{tree:{'type':'CallExpression','callee':{'type':'MemberExpression','computed':true,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'Identifier','name':'propName','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':19}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':20}}},'arguments':[],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':22}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'propName','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':19}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':20}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':21}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':22}}}],content:'assert(foo[propName]());',filepath:'/path/to/some_test.js'}));");

        inst("assert(foo[hoge[fuga[piyo]]]());",
             "assert(assert._expr(assert._capt(assert._capt(foo,'callee/object')[assert._capt(assert._capt(hoge,'callee/property/object')[assert._capt(assert._capt(fuga,'callee/property/property/object')[assert._capt(piyo,'callee/property/property/property')],'callee/property/property')],'callee/property')](),''),{tree:{'type':'CallExpression','callee':{'type':'MemberExpression','computed':true,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'MemberExpression','computed':true,'object':{'type':'Identifier','name':'hoge','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':15}}},'property':{'type':'MemberExpression','computed':true,'object':{'type':'Identifier','name':'fuga','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':20}}},'property':{'type':'Identifier','name':'piyo','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':25}}},'loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':26}}},'loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':27}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':28}}},'arguments':[],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':30}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'hoge','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':15}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':16}}},{'type':'Identifier','value':'fuga','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':20}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':21}}},{'type':'Identifier','value':'piyo','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':25}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':26}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':27}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':27},'end':{'line':1,'column':28}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':29}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':30}}}],content:'assert(foo[hoge[fuga[piyo]]]());',filepath:'/path/to/some_test.js'}));");

        inst("assert(sum(one, two, three) === seven);",
             "assert(assert._expr(assert._capt(assert._capt(sum(assert._capt(one,'left/arguments/0'),assert._capt(two,'left/arguments/1'),assert._capt(three,'left/arguments/2')),'left')===assert._capt(seven,'right'),''),{tree:{'type':'BinaryExpression','operator':'===','left':{'type':'CallExpression','callee':{'type':'Identifier','name':'sum','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'arguments':[{'type':'Identifier','name':'one','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},{'type':'Identifier','name':'two','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':19}}},{'type':'Identifier','name':'three','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':26}}}],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':27}}},'right':{'type':'Identifier','name':'seven','loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':37}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':37}}},tokens:[{'type':'Identifier','value':'sum','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'one','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':15}}},{'type':'Identifier','value':'two','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':19}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':20}}},{'type':'Identifier','value':'three','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':26}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':27}}},{'type':'Punctuator','value':'===','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':31}}},{'type':'Identifier','value':'seven','loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':37}}}],content:'assert(sum(one, two, three) === seven);',filepath:'/path/to/some_test.js'}));");

        inst("assert(sum(sum(one, two), three) === sum(sum(two, three), seven));",
             "assert(assert._expr(assert._capt(assert._capt(sum(assert._capt(sum(assert._capt(one,'left/arguments/0/arguments/0'),assert._capt(two,'left/arguments/0/arguments/1')),'left/arguments/0'),assert._capt(three,'left/arguments/1')),'left')===assert._capt(sum(assert._capt(sum(assert._capt(two,'right/arguments/0/arguments/0'),assert._capt(three,'right/arguments/0/arguments/1')),'right/arguments/0'),assert._capt(seven,'right/arguments/1')),'right'),''),{tree:{'type':'BinaryExpression','operator':'===','left':{'type':'CallExpression','callee':{'type':'Identifier','name':'sum','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'arguments':[{'type':'CallExpression','callee':{'type':'Identifier','name':'sum','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},'arguments':[{'type':'Identifier','name':'one','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':18}}},{'type':'Identifier','name':'two','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':23}}}],'loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':24}}},{'type':'Identifier','name':'three','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':31}}}],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':32}}},'right':{'type':'CallExpression','callee':{'type':'Identifier','name':'sum','loc':{'start':{'line':1,'column':37},'end':{'line':1,'column':40}}},'arguments':[{'type':'CallExpression','callee':{'type':'Identifier','name':'sum','loc':{'start':{'line':1,'column':41},'end':{'line':1,'column':44}}},'arguments':[{'type':'Identifier','name':'two','loc':{'start':{'line':1,'column':45},'end':{'line':1,'column':48}}},{'type':'Identifier','name':'three','loc':{'start':{'line':1,'column':50},'end':{'line':1,'column':55}}}],'loc':{'start':{'line':1,'column':41},'end':{'line':1,'column':56}}},{'type':'Identifier','name':'seven','loc':{'start':{'line':1,'column':58},'end':{'line':1,'column':63}}}],'loc':{'start':{'line':1,'column':37},'end':{'line':1,'column':64}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':64}}},tokens:[{'type':'Identifier','value':'sum','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'sum','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':15}}},{'type':'Identifier','value':'one','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':18}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':19}}},{'type':'Identifier','value':'two','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':23}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':24}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':25}}},{'type':'Identifier','value':'three','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':31}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':32}}},{'type':'Punctuator','value':'===','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':36}}},{'type':'Identifier','value':'sum','loc':{'start':{'line':1,'column':37},'end':{'line':1,'column':40}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':40},'end':{'line':1,'column':41}}},{'type':'Identifier','value':'sum','loc':{'start':{'line':1,'column':41},'end':{'line':1,'column':44}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':44},'end':{'line':1,'column':45}}},{'type':'Identifier','value':'two','loc':{'start':{'line':1,'column':45},'end':{'line':1,'column':48}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':48},'end':{'line':1,'column':49}}},{'type':'Identifier','value':'three','loc':{'start':{'line':1,'column':50},'end':{'line':1,'column':55}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':55},'end':{'line':1,'column':56}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':56},'end':{'line':1,'column':57}}},{'type':'Identifier','value':'seven','loc':{'start':{'line':1,'column':58},'end':{'line':1,'column':63}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':63},'end':{'line':1,'column':64}}}],content:'assert(sum(sum(one, two), three) === sum(sum(two, three), seven));',filepath:'/path/to/some_test.js'}));");

        inst("assert(math.calc.sum(one, two, three) === seven);",
             "assert(assert._expr(assert._capt(assert._capt(assert._capt(assert._capt(math,'left/callee/object/object').calc,'left/callee/object').sum(assert._capt(one,'left/arguments/0'),assert._capt(two,'left/arguments/1'),assert._capt(three,'left/arguments/2')),'left')===assert._capt(seven,'right'),''),{tree:{'type':'BinaryExpression','operator':'===','left':{'type':'CallExpression','callee':{'type':'MemberExpression','computed':false,'object':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'math','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},'property':{'type':'Identifier','name':'calc','loc':{'start':{'line':1,'column':12},'end':{'line':1,'column':16}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':16}}},'property':{'type':'Identifier','name':'sum','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':20}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':20}}},'arguments':[{'type':'Identifier','name':'one','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':24}}},{'type':'Identifier','name':'two','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':29}}},{'type':'Identifier','name':'three','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':36}}}],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':37}}},'right':{'type':'Identifier','name':'seven','loc':{'start':{'line':1,'column':42},'end':{'line':1,'column':47}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':47}}},tokens:[{'type':'Identifier','value':'math','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':11}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':12}}},{'type':'Identifier','value':'calc','loc':{'start':{'line':1,'column':12},'end':{'line':1,'column':16}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':17}}},{'type':'Identifier','value':'sum','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':20}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':21}}},{'type':'Identifier','value':'one','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':24}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':25}}},{'type':'Identifier','value':'two','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':29}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':30}}},{'type':'Identifier','value':'three','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':36}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':36},'end':{'line':1,'column':37}}},{'type':'Punctuator','value':'===','loc':{'start':{'line':1,'column':38},'end':{'line':1,'column':41}}},{'type':'Identifier','value':'seven','loc':{'start':{'line':1,'column':42},'end':{'line':1,'column':47}}}],content:'assert(math.calc.sum(one, two, three) === seven);',filepath:'/path/to/some_test.js'}));");

        inst("assert((three * (seven * ten)) === three);",
             "assert(assert._expr(assert._capt(assert._capt(assert._capt(three,'left/left')*assert._capt(assert._capt(seven,'left/right/left')*assert._capt(ten,'left/right/right'),'left/right'),'left')===assert._capt(three,'right'),''),{tree:{'type':'BinaryExpression','operator':'===','left':{'type':'BinaryExpression','operator':'*','left':{'type':'Identifier','name':'three','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':13}}},'right':{'type':'BinaryExpression','operator':'*','left':{'type':'Identifier','name':'seven','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':22}}},'right':{'type':'Identifier','name':'ten','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':28}}},'loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':28}}},'loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':29}}},'right':{'type':'Identifier','name':'three','loc':{'start':{'line':1,'column':35},'end':{'line':1,'column':40}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':40}}},tokens:[{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Identifier','value':'three','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':13}}},{'type':'Punctuator','value':'*','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':15}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':17}}},{'type':'Identifier','value':'seven','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':22}}},{'type':'Punctuator','value':'*','loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':24}}},{'type':'Identifier','value':'ten','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':28}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':29}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':30}}},{'type':'Punctuator','value':'===','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':34}}},{'type':'Identifier','value':'three','loc':{'start':{'line':1,'column':35},'end':{'line':1,'column':40}}}],content:'assert((three * (seven * ten)) === three);',filepath:'/path/to/some_test.js'}));");

        inst("assert(!concat(fuga, piyo));",
             "assert(assert._expr(assert._capt(!assert._capt(concat(assert._capt(fuga,'argument/arguments/0'),assert._capt(piyo,'argument/arguments/1')),'argument'),''),{tree:{'type':'UnaryExpression','operator':'!','argument':{'type':'CallExpression','callee':{'type':'Identifier','name':'concat','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':14}}},'arguments':[{'type':'Identifier','name':'fuga','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':19}}},{'type':'Identifier','name':'piyo','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':25}}}],'loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':26}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':26}}},tokens:[{'type':'Punctuator','value':'!','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Identifier','value':'concat','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':15}}},{'type':'Identifier','value':'fuga','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':19}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':20}}},{'type':'Identifier','value':'piyo','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':25}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':26}}}],content:'assert(!concat(fuga, piyo));',filepath:'/path/to/some_test.js'}));");

        inst("assert.strictEqual((three * (seven * ten)), math.calc.sum(one, two, three));",
             "assert.strictEqual(assert._expr(assert._capt(assert._capt(three,'left')*assert._capt(assert._capt(seven,'right/left')*assert._capt(ten,'right/right'),'right'),''),{tree:{'type':'BinaryExpression','operator':'*','left':{'type':'Identifier','name':'three','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':25}}},'right':{'type':'BinaryExpression','operator':'*','left':{'type':'Identifier','name':'seven','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':34}}},'right':{'type':'Identifier','name':'ten','loc':{'start':{'line':1,'column':37},'end':{'line':1,'column':40}}},'loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':40}}},'loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':41}}},tokens:[{'type':'Identifier','value':'three','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':25}}},{'type':'Punctuator','value':'*','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':27}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':29}}},{'type':'Identifier','value':'seven','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':34}}},{'type':'Punctuator','value':'*','loc':{'start':{'line':1,'column':35},'end':{'line':1,'column':36}}},{'type':'Identifier','value':'ten','loc':{'start':{'line':1,'column':37},'end':{'line':1,'column':40}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':40},'end':{'line':1,'column':41}}}],content:'assert.strictEqual((three * (seven * ten)), math.calc.sum(one, two, three));',filepath:'/path/to/some_test.js'}),assert._expr(assert._capt(assert._capt(assert._capt(math,'callee/object/object').calc,'callee/object').sum(assert._capt(one,'arguments/0'),assert._capt(two,'arguments/1'),assert._capt(three,'arguments/2')),''),{tree:{'type':'CallExpression','callee':{'type':'MemberExpression','computed':false,'object':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'math','loc':{'start':{'line':1,'column':44},'end':{'line':1,'column':48}}},'property':{'type':'Identifier','name':'calc','loc':{'start':{'line':1,'column':49},'end':{'line':1,'column':53}}},'loc':{'start':{'line':1,'column':44},'end':{'line':1,'column':53}}},'property':{'type':'Identifier','name':'sum','loc':{'start':{'line':1,'column':54},'end':{'line':1,'column':57}}},'loc':{'start':{'line':1,'column':44},'end':{'line':1,'column':57}}},'arguments':[{'type':'Identifier','name':'one','loc':{'start':{'line':1,'column':58},'end':{'line':1,'column':61}}},{'type':'Identifier','name':'two','loc':{'start':{'line':1,'column':63},'end':{'line':1,'column':66}}},{'type':'Identifier','name':'three','loc':{'start':{'line':1,'column':68},'end':{'line':1,'column':73}}}],'loc':{'start':{'line':1,'column':44},'end':{'line':1,'column':74}}},tokens:[{'type':'Identifier','value':'math','loc':{'start':{'line':1,'column':44},'end':{'line':1,'column':48}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':48},'end':{'line':1,'column':49}}},{'type':'Identifier','value':'calc','loc':{'start':{'line':1,'column':49},'end':{'line':1,'column':53}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':53},'end':{'line':1,'column':54}}},{'type':'Identifier','value':'sum','loc':{'start':{'line':1,'column':54},'end':{'line':1,'column':57}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':57},'end':{'line':1,'column':58}}},{'type':'Identifier','value':'one','loc':{'start':{'line':1,'column':58},'end':{'line':1,'column':61}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':61},'end':{'line':1,'column':62}}},{'type':'Identifier','value':'two','loc':{'start':{'line':1,'column':63},'end':{'line':1,'column':66}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':66},'end':{'line':1,'column':67}}},{'type':'Identifier','value':'three','loc':{'start':{'line':1,'column':68},'end':{'line':1,'column':73}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':73},'end':{'line':1,'column':74}}}],content:'assert.strictEqual((three * (seven * ten)), math.calc.sum(one, two, three));',filepath:'/path/to/some_test.js'}));");
    });


    describe('AssignmentExpression', function () {
        inst("assert(counter += 1);",
             "assert(assert._expr(assert._capt(counter+=1,''),{tree:{'type':'AssignmentExpression','operator':'+=','left':{'type':'Identifier','name':'counter','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':14}}},'right':{'type':'Literal','value':1,'loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':19}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':19}}},tokens:[{'type':'Identifier','value':'counter','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':'+=','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':17}}},{'type':'Numeric','value':'1','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':19}}}],content:'assert(counter += 1);',filepath:'/path/to/some_test.js'}));");

        inst("assert(dog.age += 1);",
             "assert(assert._expr(assert._capt(dog.age+=1,''),{tree:{'type':'AssignmentExpression','operator':'+=','left':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'dog','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'Identifier','name':'age','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':14}}},'right':{'type':'Literal','value':1,'loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':19}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':19}}},tokens:[{'type':'Identifier','value':'dog','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'age','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':'+=','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':17}}},{'type':'Numeric','value':'1','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':19}}}],content:'assert(dog.age += 1);',filepath:'/path/to/some_test.js'}));");

        inst("assert(dog.age    +=  1);",
             "assert(assert._expr(assert._capt(dog.age+=1,''),{tree:{'type':'AssignmentExpression','operator':'+=','left':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'dog','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'property':{'type':'Identifier','name':'age','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':14}}},'right':{'type':'Literal','value':1,'loc':{'start':{'line':1,'column':22},'end':{'line':1,'column':23}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':23}}},tokens:[{'type':'Identifier','value':'dog','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Identifier','value':'age','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':'+=','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':20}}},{'type':'Numeric','value':'1','loc':{'start':{'line':1,'column':22},'end':{'line':1,'column':23}}}],content:'assert(dog.age    +=  1);',filepath:'/path/to/some_test.js'}));");

        inst("assert.strictEqual(dog.age += 1, three);",
             "assert.strictEqual(assert._expr(assert._capt(dog.age+=1,''),{tree:{'type':'AssignmentExpression','operator':'+=','left':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'dog','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':22}}},'property':{'type':'Identifier','name':'age','loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':26}}},'loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':26}}},'right':{'type':'Literal','value':1,'loc':{'start':{'line':1,'column':30},'end':{'line':1,'column':31}}},'loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':31}}},tokens:[{'type':'Identifier','value':'dog','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':22}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':22},'end':{'line':1,'column':23}}},{'type':'Identifier','value':'age','loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':26}}},{'type':'Punctuator','value':'+=','loc':{'start':{'line':1,'column':27},'end':{'line':1,'column':29}}},{'type':'Numeric','value':'1','loc':{'start':{'line':1,'column':30},'end':{'line':1,'column':31}}}],content:'assert.strictEqual(dog.age += 1, three);',filepath:'/path/to/some_test.js'}),assert._expr(assert._capt(three,''),{tree:{'type':'Identifier','name':'three','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':38}}},tokens:[{'type':'Identifier','value':'three','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':38}}}],content:'assert.strictEqual(dog.age += 1, three);',filepath:'/path/to/some_test.js'}));");
    });


    describe('ArrayExpression', function () {
        inst("assert([foo, bar]);",
             "assert(assert._expr([assert._capt(foo,'elements/0'),assert._capt(bar,'elements/1')],{tree:{'type':'ArrayExpression','elements':[{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':11}}},{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}}],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':17}}},tokens:[{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':11}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':12}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':17}}}],content:'assert([foo, bar]);',filepath:'/path/to/some_test.js'}));");

        inst("assert(typeof [[foo.bar, baz(moo)], + fourStr] === 'number');",
             "assert(assert._expr(assert._capt(assert._capt(typeof[[assert._capt(assert._capt(foo,'left/argument/elements/0/elements/0/object').bar,'left/argument/elements/0/elements/0'),assert._capt(baz(assert._capt(moo,'left/argument/elements/0/elements/1/arguments/0')),'left/argument/elements/0/elements/1')],assert._capt(+assert._capt(fourStr,'left/argument/elements/1/argument'),'left/argument/elements/1')],'left')==='number',''),{tree:{'type':'BinaryExpression','operator':'===','left':{'type':'UnaryExpression','operator':'typeof','argument':{'type':'ArrayExpression','elements':[{'type':'ArrayExpression','elements':[{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':19}}},'property':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':23}}},'loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':23}}},{'type':'CallExpression','callee':{'type':'Identifier','name':'baz','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':28}}},'arguments':[{'type':'Identifier','name':'moo','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':32}}}],'loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':33}}}],'loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':34}}},{'type':'UnaryExpression','operator':'+','argument':{'type':'Identifier','name':'fourStr','loc':{'start':{'line':1,'column':38},'end':{'line':1,'column':45}}},'prefix':true,'loc':{'start':{'line':1,'column':36},'end':{'line':1,'column':45}}}],'loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':46}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':46}}},'right':{'type':'Literal','value':'number','loc':{'start':{'line':1,'column':51},'end':{'line':1,'column':59}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':59}}},tokens:[{'type':'Keyword','value':'typeof','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':13}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':15}}},{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':16}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':19}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':20}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':23}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':24}}},{'type':'Identifier','value':'baz','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':28}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':29}}},{'type':'Identifier','value':'moo','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':32}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':33}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':34}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':34},'end':{'line':1,'column':35}}},{'type':'Punctuator','value':'+','loc':{'start':{'line':1,'column':36},'end':{'line':1,'column':37}}},{'type':'Identifier','value':'fourStr','loc':{'start':{'line':1,'column':38},'end':{'line':1,'column':45}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':45},'end':{'line':1,'column':46}}},{'type':'Punctuator','value':'===','loc':{'start':{'line':1,'column':47},'end':{'line':1,'column':50}}},{'type':'String','value':'\\'number\\'','loc':{'start':{'line':1,'column':51},'end':{'line':1,'column':59}}}],content:'assert(typeof [[foo.bar, baz(moo)], + fourStr] === \\'number\\');',filepath:'/path/to/some_test.js'}));");

        inst("assert.notDeepEqual([foo, bar], [hoge, fuga, piyo]);",
             "assert.notDeepEqual(assert._expr([assert._capt(foo,'elements/0'),assert._capt(bar,'elements/1')],{tree:{'type':'ArrayExpression','elements':[{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':24}}},{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':29}}}],'loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':30}}},tokens:[{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':21}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':24}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':25}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':29}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':30}}}],content:'assert.notDeepEqual([foo, bar], [hoge, fuga, piyo]);',filepath:'/path/to/some_test.js'}),assert._expr([assert._capt(hoge,'elements/0'),assert._capt(fuga,'elements/1'),assert._capt(piyo,'elements/2')],{tree:{'type':'ArrayExpression','elements':[{'type':'Identifier','name':'hoge','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':37}}},{'type':'Identifier','name':'fuga','loc':{'start':{'line':1,'column':39},'end':{'line':1,'column':43}}},{'type':'Identifier','name':'piyo','loc':{'start':{'line':1,'column':45},'end':{'line':1,'column':49}}}],'loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':50}}},tokens:[{'type':'Punctuator','value':'[','loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':33}}},{'type':'Identifier','value':'hoge','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':37}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':37},'end':{'line':1,'column':38}}},{'type':'Identifier','value':'fuga','loc':{'start':{'line':1,'column':39},'end':{'line':1,'column':43}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':43},'end':{'line':1,'column':44}}},{'type':'Identifier','value':'piyo','loc':{'start':{'line':1,'column':45},'end':{'line':1,'column':49}}},{'type':'Punctuator','value':']','loc':{'start':{'line':1,'column':49},'end':{'line':1,'column':50}}}],content:'assert.notDeepEqual([foo, bar], [hoge, fuga, piyo]);',filepath:'/path/to/some_test.js'}));");
    });


    describe('UpdateExpression', function () {
        inst("assert(++foo);",
             "assert(assert._expr(assert._capt(++foo,''),{tree:{'type':'UpdateExpression','operator':'++','argument':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':12}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':12}}},tokens:[{'type':'Punctuator','value':'++','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':9}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':12}}}],content:'assert(++foo);',filepath:'/path/to/some_test.js'}));");

        inst("assert(bar--);",
             "assert(assert._expr(assert._capt(bar--,''),{tree:{'type':'UpdateExpression','operator':'--','argument':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'prefix':false,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':12}}},tokens:[{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'--','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':12}}}],content:'assert(bar--);',filepath:'/path/to/some_test.js'}));");

        inst("assert.strictEqual(++foo, bar--);",
             "assert.strictEqual(assert._expr(assert._capt(++foo,''),{tree:{'type':'UpdateExpression','operator':'++','argument':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':24}}},'prefix':true,'loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':24}}},tokens:[{'type':'Punctuator','value':'++','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':21}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':24}}}],content:'assert.strictEqual(++foo, bar--);',filepath:'/path/to/some_test.js'}),assert._expr(assert._capt(bar--,''),{tree:{'type':'UpdateExpression','operator':'--','argument':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':29}}},'prefix':false,'loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':31}}},tokens:[{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':29}}},{'type':'Punctuator','value':'--','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':31}}}],content:'assert.strictEqual(++foo, bar--);',filepath:'/path/to/some_test.js'}));");
    });


    describe('ConditionalExpression', function () {
        inst("assert(foo ? bar : baz);",
             "assert(assert._expr(assert._capt(foo,'test')?assert._capt(bar,'consequent'):assert._capt(baz,'alternate'),{tree:{'type':'ConditionalExpression','test':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'consequent':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}},'alternate':{'type':'Identifier','name':'baz','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':22}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':22}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'?','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':12}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':18}}},{'type':'Identifier','value':'baz','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':22}}}],content:'assert(foo ? bar : baz);',filepath:'/path/to/some_test.js'}));");

        inst("assert(falsy ? truthy : truthy ? anotherFalsy : truthy);",
             "assert(assert._expr(assert._capt(falsy,'test')?assert._capt(truthy,'consequent'):assert._capt(truthy,'alternate/test')?assert._capt(anotherFalsy,'alternate/consequent'):assert._capt(truthy,'alternate/alternate'),{tree:{'type':'ConditionalExpression','test':{'type':'Identifier','name':'falsy','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':12}}},'consequent':{'type':'Identifier','name':'truthy','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':21}}},'alternate':{'type':'ConditionalExpression','test':{'type':'Identifier','name':'truthy','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':30}}},'consequent':{'type':'Identifier','name':'anotherFalsy','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':45}}},'alternate':{'type':'Identifier','name':'truthy','loc':{'start':{'line':1,'column':48},'end':{'line':1,'column':54}}},'loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':54}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':54}}},tokens:[{'type':'Identifier','value':'falsy','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':12}}},{'type':'Punctuator','value':'?','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':14}}},{'type':'Identifier','value':'truthy','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':21}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':22},'end':{'line':1,'column':23}}},{'type':'Identifier','value':'truthy','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':30}}},{'type':'Punctuator','value':'?','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':32}}},{'type':'Identifier','value':'anotherFalsy','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':45}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':46},'end':{'line':1,'column':47}}},{'type':'Identifier','value':'truthy','loc':{'start':{'line':1,'column':48},'end':{'line':1,'column':54}}}],content:'assert(falsy ? truthy : truthy ? anotherFalsy : truthy);',filepath:'/path/to/some_test.js'}));");

        inst("assert(foo() ? bar.baz : (typeof goo));",
             "assert(assert._expr(assert._capt(foo(),'test')?assert._capt(assert._capt(bar,'consequent/object').baz,'consequent'):assert._capt(typeof goo,'alternate'),{tree:{'type':'ConditionalExpression','test':{'type':'CallExpression','callee':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'arguments':[],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':12}}},'consequent':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':18}}},'property':{'type':'Identifier','name':'baz','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':22}}},'loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':22}}},'alternate':{'type':'UnaryExpression','operator':'typeof','argument':{'type':'Identifier','name':'goo','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':36}}},'prefix':true,'loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':36}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':37}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':10},'end':{'line':1,'column':11}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':12}}},{'type':'Punctuator','value':'?','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':14}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':18}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':19}}},{'type':'Identifier','value':'baz','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':22}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':24}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':26}}},{'type':'Keyword','value':'typeof','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':32}}},{'type':'Identifier','value':'goo','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':36}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':36},'end':{'line':1,'column':37}}}],content:'assert(foo() ? bar.baz : (typeof goo));',filepath:'/path/to/some_test.js'}));");

        inst("assert.equal((foo ? bar : baz), (falsy ? truthy : truthy ? anotherFalsy : truthy));",
             "assert.equal(assert._expr(assert._capt(foo,'test')?assert._capt(bar,'consequent'):assert._capt(baz,'alternate'),{tree:{'type':'ConditionalExpression','test':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':17}}},'consequent':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':23}}},'alternate':{'type':'Identifier','name':'baz','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':29}}},'loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':29}}},tokens:[{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':17}}},{'type':'Punctuator','value':'?','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':19}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':23}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':25}}},{'type':'Identifier','value':'baz','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':29}}}],content:'assert.equal((foo ? bar : baz), (falsy ? truthy : truthy ? anotherFalsy : truthy));',filepath:'/path/to/some_test.js'}),assert._expr(assert._capt(falsy,'test')?assert._capt(truthy,'consequent'):assert._capt(truthy,'alternate/test')?assert._capt(anotherFalsy,'alternate/consequent'):assert._capt(truthy,'alternate/alternate'),{tree:{'type':'ConditionalExpression','test':{'type':'Identifier','name':'falsy','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':38}}},'consequent':{'type':'Identifier','name':'truthy','loc':{'start':{'line':1,'column':41},'end':{'line':1,'column':47}}},'alternate':{'type':'ConditionalExpression','test':{'type':'Identifier','name':'truthy','loc':{'start':{'line':1,'column':50},'end':{'line':1,'column':56}}},'consequent':{'type':'Identifier','name':'anotherFalsy','loc':{'start':{'line':1,'column':59},'end':{'line':1,'column':71}}},'alternate':{'type':'Identifier','name':'truthy','loc':{'start':{'line':1,'column':74},'end':{'line':1,'column':80}}},'loc':{'start':{'line':1,'column':50},'end':{'line':1,'column':80}}},'loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':80}}},tokens:[{'type':'Identifier','value':'falsy','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':38}}},{'type':'Punctuator','value':'?','loc':{'start':{'line':1,'column':39},'end':{'line':1,'column':40}}},{'type':'Identifier','value':'truthy','loc':{'start':{'line':1,'column':41},'end':{'line':1,'column':47}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':48},'end':{'line':1,'column':49}}},{'type':'Identifier','value':'truthy','loc':{'start':{'line':1,'column':50},'end':{'line':1,'column':56}}},{'type':'Punctuator','value':'?','loc':{'start':{'line':1,'column':57},'end':{'line':1,'column':58}}},{'type':'Identifier','value':'anotherFalsy','loc':{'start':{'line':1,'column':59},'end':{'line':1,'column':71}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':72},'end':{'line':1,'column':73}}},{'type':'Identifier','value':'truthy','loc':{'start':{'line':1,'column':74},'end':{'line':1,'column':80}}}],content:'assert.equal((foo ? bar : baz), (falsy ? truthy : truthy ? anotherFalsy : truthy));',filepath:'/path/to/some_test.js'}));");
    });


    describe('RegularExpression will not be instrumented', function () {
        inst("assert(/^not/.exec(str));",
             "assert(assert._expr(assert._capt(/^not/.exec(assert._capt(str,'arguments/0')),''),{tree:{'type':'CallExpression','callee':{'type':'MemberExpression','computed':false,'object':{'type':'Literal','value':{},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':13}}},'property':{'type':'Identifier','name':'exec','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':18}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':18}}},'arguments':[{'type':'Identifier','name':'str','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':22}}}],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':23}}},tokens:[{'type':'RegularExpression','value':'/^not/','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':13}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':14}}},{'type':'Identifier','value':'exec','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':18}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':19}}},{'type':'Identifier','value':'str','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':22}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':22},'end':{'line':1,'column':23}}}],content:'assert(/^not/.exec(str));',filepath:'/path/to/some_test.js'}));");
    });


    describe('ObjectExpression', function () {
        inst("assert({foo: bar, hoge: fuga});",
             "assert(assert._expr({foo:assert._capt(bar,'properties/0/value'),hoge:assert._capt(fuga,'properties/1/value')},{tree:{'type':'ObjectExpression','properties':[{'type':'Property','key':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':11}}},'value':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}},'kind':'init','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':16}}},{'type':'Property','key':{'type':'Identifier','name':'hoge','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':22}}},'value':{'type':'Identifier','name':'fuga','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':28}}},'kind':'init','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':28}}}],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':29}}},tokens:[{'type':'Punctuator','value':'{','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':11}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':12}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':16}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':17}}},{'type':'Identifier','value':'hoge','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':22}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':22},'end':{'line':1,'column':23}}},{'type':'Identifier','value':'fuga','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':28}}},{'type':'Punctuator','value':'}','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':29}}}],content:'assert({foo: bar, hoge: fuga});',filepath:'/path/to/some_test.js'}));");

        inst("assert(!({ foo: bar.baz, name: nameOf({firstName: first, lastName: last}) }));",
             "assert(assert._expr(assert._capt(!{foo:assert._capt(assert._capt(bar,'argument/properties/0/value/object').baz,'argument/properties/0/value'),name:assert._capt(nameOf({firstName:assert._capt(first,'argument/properties/1/value/arguments/0/properties/0/value'),lastName:assert._capt(last,'argument/properties/1/value/arguments/0/properties/1/value')}),'argument/properties/1/value')},''),{tree:{'type':'UnaryExpression','operator':'!','argument':{'type':'ObjectExpression','properties':[{'type':'Property','key':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},'value':{'type':'MemberExpression','computed':false,'object':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':19}}},'property':{'type':'Identifier','name':'baz','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':23}}},'loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':23}}},'kind':'init','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':23}}},{'type':'Property','key':{'type':'Identifier','name':'name','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':29}}},'value':{'type':'CallExpression','callee':{'type':'Identifier','name':'nameOf','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':37}}},'arguments':[{'type':'ObjectExpression','properties':[{'type':'Property','key':{'type':'Identifier','name':'firstName','loc':{'start':{'line':1,'column':39},'end':{'line':1,'column':48}}},'value':{'type':'Identifier','name':'first','loc':{'start':{'line':1,'column':50},'end':{'line':1,'column':55}}},'kind':'init','loc':{'start':{'line':1,'column':39},'end':{'line':1,'column':55}}},{'type':'Property','key':{'type':'Identifier','name':'lastName','loc':{'start':{'line':1,'column':57},'end':{'line':1,'column':65}}},'value':{'type':'Identifier','name':'last','loc':{'start':{'line':1,'column':67},'end':{'line':1,'column':71}}},'kind':'init','loc':{'start':{'line':1,'column':57},'end':{'line':1,'column':71}}}],'loc':{'start':{'line':1,'column':38},'end':{'line':1,'column':72}}}],'loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':73}}},'kind':'init','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':73}}}],'loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':75}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':76}}},tokens:[{'type':'Punctuator','value':'!','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':9}}},{'type':'Punctuator','value':'{','loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':10}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':14},'end':{'line':1,'column':15}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':19}}},{'type':'Punctuator','value':'.','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':20}}},{'type':'Identifier','value':'baz','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':23}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':24}}},{'type':'Identifier','value':'name','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':29}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':30}}},{'type':'Identifier','value':'nameOf','loc':{'start':{'line':1,'column':31},'end':{'line':1,'column':37}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':37},'end':{'line':1,'column':38}}},{'type':'Punctuator','value':'{','loc':{'start':{'line':1,'column':38},'end':{'line':1,'column':39}}},{'type':'Identifier','value':'firstName','loc':{'start':{'line':1,'column':39},'end':{'line':1,'column':48}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':48},'end':{'line':1,'column':49}}},{'type':'Identifier','value':'first','loc':{'start':{'line':1,'column':50},'end':{'line':1,'column':55}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':55},'end':{'line':1,'column':56}}},{'type':'Identifier','value':'lastName','loc':{'start':{'line':1,'column':57},'end':{'line':1,'column':65}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':65},'end':{'line':1,'column':66}}},{'type':'Identifier','value':'last','loc':{'start':{'line':1,'column':67},'end':{'line':1,'column':71}}},{'type':'Punctuator','value':'}','loc':{'start':{'line':1,'column':71},'end':{'line':1,'column':72}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':72},'end':{'line':1,'column':73}}},{'type':'Punctuator','value':'}','loc':{'start':{'line':1,'column':74},'end':{'line':1,'column':75}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':75},'end':{'line':1,'column':76}}}],content:'assert(!({ foo: bar.baz, name: nameOf({firstName: first, lastName: last}) }));',filepath:'/path/to/some_test.js'}));");

        inst("assert.deepEqual({foo: bar, hoge: fuga}, {hoge: fuga, foo: bar});",
             "assert.deepEqual(assert._expr({foo:assert._capt(bar,'properties/0/value'),hoge:assert._capt(fuga,'properties/1/value')},{tree:{'type':'ObjectExpression','properties':[{'type':'Property','key':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':21}}},'value':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':26}}},'kind':'init','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':26}}},{'type':'Property','key':{'type':'Identifier','name':'hoge','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':32}}},'value':{'type':'Identifier','name':'fuga','loc':{'start':{'line':1,'column':34},'end':{'line':1,'column':38}}},'kind':'init','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':38}}}],'loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':39}}},tokens:[{'type':'Punctuator','value':'{','loc':{'start':{'line':1,'column':17},'end':{'line':1,'column':18}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':21}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':21},'end':{'line':1,'column':22}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':23},'end':{'line':1,'column':26}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':27}}},{'type':'Identifier','value':'hoge','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':32}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':33}}},{'type':'Identifier','value':'fuga','loc':{'start':{'line':1,'column':34},'end':{'line':1,'column':38}}},{'type':'Punctuator','value':'}','loc':{'start':{'line':1,'column':38},'end':{'line':1,'column':39}}}],content:'assert.deepEqual({foo: bar, hoge: fuga}, {hoge: fuga, foo: bar});',filepath:'/path/to/some_test.js'}),assert._expr({hoge:assert._capt(fuga,'properties/0/value'),foo:assert._capt(bar,'properties/1/value')},{tree:{'type':'ObjectExpression','properties':[{'type':'Property','key':{'type':'Identifier','name':'hoge','loc':{'start':{'line':1,'column':42},'end':{'line':1,'column':46}}},'value':{'type':'Identifier','name':'fuga','loc':{'start':{'line':1,'column':48},'end':{'line':1,'column':52}}},'kind':'init','loc':{'start':{'line':1,'column':42},'end':{'line':1,'column':52}}},{'type':'Property','key':{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':54},'end':{'line':1,'column':57}}},'value':{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':59},'end':{'line':1,'column':62}}},'kind':'init','loc':{'start':{'line':1,'column':54},'end':{'line':1,'column':62}}}],'loc':{'start':{'line':1,'column':41},'end':{'line':1,'column':63}}},tokens:[{'type':'Punctuator','value':'{','loc':{'start':{'line':1,'column':41},'end':{'line':1,'column':42}}},{'type':'Identifier','value':'hoge','loc':{'start':{'line':1,'column':42},'end':{'line':1,'column':46}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':46},'end':{'line':1,'column':47}}},{'type':'Identifier','value':'fuga','loc':{'start':{'line':1,'column':48},'end':{'line':1,'column':52}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':52},'end':{'line':1,'column':53}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':54},'end':{'line':1,'column':57}}},{'type':'Punctuator','value':':','loc':{'start':{'line':1,'column':57},'end':{'line':1,'column':58}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':59},'end':{'line':1,'column':62}}},{'type':'Punctuator','value':'}','loc':{'start':{'line':1,'column':62},'end':{'line':1,'column':63}}}],content:'assert.deepEqual({foo: bar, hoge: fuga}, {hoge: fuga, foo: bar});',filepath:'/path/to/some_test.js'}));");
    });


    describe('NewExpression', function () {
        inst("assert(new Date());",
             "assert(assert._expr(assert._capt(new Date(),''),{tree:{'type':'NewExpression','callee':{'type':'Identifier','name':'Date','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':15}}},'arguments':[],'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':17}}},tokens:[{'type':'Keyword','value':'new','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Identifier','value':'Date','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':15}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':16}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':17}}}],content:'assert(new Date());',filepath:'/path/to/some_test.js'}));");

        inst("assert(!(new Array(foo, bar, baz)));",
             "assert(assert._expr(assert._capt(!assert._capt(new Array(assert._capt(foo,'argument/arguments/0'),assert._capt(bar,'argument/arguments/1'),assert._capt(baz,'argument/arguments/2')),'argument'),''),{tree:{'type':'UnaryExpression','operator':'!','argument':{'type':'NewExpression','callee':{'type':'Identifier','name':'Array','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':18}}},'arguments':[{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':22}}},{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':27}}},{'type':'Identifier','name':'baz','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':32}}}],'loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':33}}},'prefix':true,'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':34}}},tokens:[{'type':'Punctuator','value':'!','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':8}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':8},'end':{'line':1,'column':9}}},{'type':'Keyword','value':'new','loc':{'start':{'line':1,'column':9},'end':{'line':1,'column':12}}},{'type':'Identifier','value':'Array','loc':{'start':{'line':1,'column':13},'end':{'line':1,'column':18}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':18},'end':{'line':1,'column':19}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':19},'end':{'line':1,'column':22}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':22},'end':{'line':1,'column':23}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':27}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':27},'end':{'line':1,'column':28}}},{'type':'Identifier','value':'baz','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':32}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':33}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':33},'end':{'line':1,'column':34}}}],content:'assert(!(new Array(foo, bar, baz)));',filepath:'/path/to/some_test.js'}));");

        inst("assert.notEqual(new Date(), new Date('2013-01-12'));",
             "assert.notEqual(assert._expr(assert._capt(new Date(),''),{tree:{'type':'NewExpression','callee':{'type':'Identifier','name':'Date','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':24}}},'arguments':[],'loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':26}}},tokens:[{'type':'Keyword','value':'new','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':19}}},{'type':'Identifier','value':'Date','loc':{'start':{'line':1,'column':20},'end':{'line':1,'column':24}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':24},'end':{'line':1,'column':25}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':26}}}],content:'assert.notEqual(new Date(), new Date(\\'2013-01-12\\'));',filepath:'/path/to/some_test.js'}),assert._expr(assert._capt(new Date('2013-01-12'),''),{tree:{'type':'NewExpression','callee':{'type':'Identifier','name':'Date','loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':36}}},'arguments':[{'type':'Literal','value':'2013-01-12','loc':{'start':{'line':1,'column':37},'end':{'line':1,'column':49}}}],'loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':50}}},tokens:[{'type':'Keyword','value':'new','loc':{'start':{'line':1,'column':28},'end':{'line':1,'column':31}}},{'type':'Identifier','value':'Date','loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':36}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':36},'end':{'line':1,'column':37}}},{'type':'String','value':'\\'2013-01-12\\'','loc':{'start':{'line':1,'column':37},'end':{'line':1,'column':49}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':49},'end':{'line':1,'column':50}}}],content:'assert.notEqual(new Date(), new Date(\\'2013-01-12\\'));',filepath:'/path/to/some_test.js'}));");
    });


    describe('FunctionExpression will not be instrumented', function () {
        inst("assert(baz === (function (a, b) { return a + b; })(foo, bar));",
             "assert(assert._expr(assert._capt(assert._capt(baz,'left')===assert._capt(function(a,b){return a+b;}(assert._capt(foo,'right/arguments/0'),assert._capt(bar,'right/arguments/1')),'right'),''),{tree:{'type':'BinaryExpression','operator':'===','left':{'type':'Identifier','name':'baz','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},'right':{'type':'CallExpression','callee':{'type':'FunctionExpression','id':null,'params':[{'type':'Identifier','name':'a','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':27}}},{'type':'Identifier','name':'b','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':30}}}],'defaults':[],'body':{'type':'BlockStatement','body':[{'type':'ReturnStatement','argument':{'type':'BinaryExpression','operator':'+','left':{'type':'Identifier','name':'a','loc':{'start':{'line':1,'column':41},'end':{'line':1,'column':42}}},'right':{'type':'Identifier','name':'b','loc':{'start':{'line':1,'column':45},'end':{'line':1,'column':46}}},'loc':{'start':{'line':1,'column':41},'end':{'line':1,'column':46}}},'loc':{'start':{'line':1,'column':34},'end':{'line':1,'column':47}}}],'loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':49}}},'rest':null,'generator':false,'expression':false,'loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':49}}},'arguments':[{'type':'Identifier','name':'foo','loc':{'start':{'line':1,'column':51},'end':{'line':1,'column':54}}},{'type':'Identifier','name':'bar','loc':{'start':{'line':1,'column':56},'end':{'line':1,'column':59}}}],'loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':60}}},'loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':60}}},tokens:[{'type':'Identifier','value':'baz','loc':{'start':{'line':1,'column':7},'end':{'line':1,'column':10}}},{'type':'Punctuator','value':'===','loc':{'start':{'line':1,'column':11},'end':{'line':1,'column':14}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':15},'end':{'line':1,'column':16}}},{'type':'Keyword','value':'function','loc':{'start':{'line':1,'column':16},'end':{'line':1,'column':24}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':25},'end':{'line':1,'column':26}}},{'type':'Identifier','value':'a','loc':{'start':{'line':1,'column':26},'end':{'line':1,'column':27}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':27},'end':{'line':1,'column':28}}},{'type':'Identifier','value':'b','loc':{'start':{'line':1,'column':29},'end':{'line':1,'column':30}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':30},'end':{'line':1,'column':31}}},{'type':'Punctuator','value':'{','loc':{'start':{'line':1,'column':32},'end':{'line':1,'column':33}}},{'type':'Keyword','value':'return','loc':{'start':{'line':1,'column':34},'end':{'line':1,'column':40}}},{'type':'Identifier','value':'a','loc':{'start':{'line':1,'column':41},'end':{'line':1,'column':42}}},{'type':'Punctuator','value':'+','loc':{'start':{'line':1,'column':43},'end':{'line':1,'column':44}}},{'type':'Identifier','value':'b','loc':{'start':{'line':1,'column':45},'end':{'line':1,'column':46}}},{'type':'Punctuator','value':';','loc':{'start':{'line':1,'column':46},'end':{'line':1,'column':47}}},{'type':'Punctuator','value':'}','loc':{'start':{'line':1,'column':48},'end':{'line':1,'column':49}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':49},'end':{'line':1,'column':50}}},{'type':'Punctuator','value':'(','loc':{'start':{'line':1,'column':50},'end':{'line':1,'column':51}}},{'type':'Identifier','value':'foo','loc':{'start':{'line':1,'column':51},'end':{'line':1,'column':54}}},{'type':'Punctuator','value':',','loc':{'start':{'line':1,'column':54},'end':{'line':1,'column':55}}},{'type':'Identifier','value':'bar','loc':{'start':{'line':1,'column':56},'end':{'line':1,'column':59}}},{'type':'Punctuator','value':')','loc':{'start':{'line':1,'column':59},'end':{'line':1,'column':60}}}],content:'assert(baz === (function (a, b) { return a + b; })(foo, bar));',filepath:'/path/to/some_test.js'}));");
    });
});

}));
